{"version":3,"file":"cycconcept.service.js","sourceRoot":"","sources":["../../src/app/shared/cycconcept.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Http,Response} from '@angular/http';\r\nimport {URLSearchParams} from '@angular/http';\r\nimport {endpoints} from './endpoints';\r\nimport {Concept} from '../+concepts/concept.model';\r\nimport {Sentence} from '../+concepts/sentence.model';\r\ndeclare var Spinner:any;\r\n\r\n@Injectable()\r\nexport class CycconceptService {\r\n\r\n  private data: any[];\r\n  private concepts: Concept[] = [];\r\n  private errorMessage:string;\r\n  private selectedAudience: string;\r\n  private isComplete:boolean = false;\r\n\r\n  constructor(private _http: Http) {\r\n  }\r\n\r\n  private extractSentence(concept: any): Sentence[] {\r\n    var sentences = [];\r\n    concept.sentences.forEach(s => {\r\n      sentences.push(new Sentence(s.nl, s.cycl));\r\n    })\r\n    return sentences;\r\n  }\r\n\r\n  public isCycQueryComplete():boolean {\r\n    return this.isComplete;\r\n  }\r\n\r\nprivate updateConceptsCache(availableConcepts:Concept[]){\r\n  let conceptsCache:any = {};\r\n  if(availableConcepts && availableConcepts.length) {\r\n    availableConcepts.forEach( c => {\r\n      let name:string = c.name;\r\n      conceptsCache[name]= true\r\n      });\r\n  }\r\n  return conceptsCache;\r\n}\r\n\r\n  public loadCycConcepts(targetAudience: string,availableConcepts:Concept[]) {\r\n    //TODO refactor spinner as a service.\r\n    this.concepts = [];\r\n    //TODO not the best way to keep track of existing concepts.\r\n    let cache:any = this.updateConceptsCache(availableConcepts);\r\n    console.log(cache);\r\n    var elem = document.getElementById('spinner');\r\n    var spinner = new Spinner({radius:60,width:20,length:80,lines:15,className:'loader',color:'wheat'}).spin(elem);\r\n    var ref = this;\r\n    let params: URLSearchParams = new URLSearchParams();\r\n    params.set('text', targetAudience);\r\n    this._http.get(endpoints.GET_CYC_CONCEPTS_DEMO, {\r\n      search: params\r\n    }).map(res => res.json())\r\n      .subscribe(data => {\r\n        if(data.statusCode !== 200) {\r\n          ref.errorMessage = 'Server encountered an error';\r\n          return;\r\n        }\r\n        let sessionId:string = data.sessionId;\r\n        data.concepts.forEach(c => {\r\n          let isNew:boolean = false;\r\n          if(availableConcepts && !cache[c.nl]) {\r\n            console.log(\"this is new concept\");\r\n            console.log(cache);\r\n            isNew = true;\r\n          }\r\n          ref.concepts.push(new Concept(c.nl, c.index,ref.extractSentence(c),sessionId,isNew));\r\n        });\r\n        spinner.stop();\r\n        this.isComplete = true;\r\n        console.log(\"concepts:\");\r\n        console.log(this.concepts);\r\n      });\r\n    return this.concepts;\r\n  }\r\n\r\n}\r\n"]}