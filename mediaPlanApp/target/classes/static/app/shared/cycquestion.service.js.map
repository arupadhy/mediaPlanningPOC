{"version":3,"file":"cycquestion.service.js","sourceRoot":"","sources":["../../src/app/shared/cycquestion.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA2B,eAAe,CAAC,CAAA;AAC3C,0BAAwB,aAAa,CAAC,CAAA;AACtC,gCAAwB,gCAAgC,CAAC,CAAA;AACzD,+BAAuB,+BAA+B,CAAC,CAAA;AAKvD;IAcE,4BAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAZvB,YAAO,GAAe,EAAE,CAAC;IAYE,CAAC;IAR5B,0CAAa,GAArB,UAAsB,IAAS;QAC7B,IAAI,OAAO,GAAgB,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,IAAI,2BAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAIM,iDAAoB,GAA3B,UAA4B,SAAa,EAAC,SAAgB;QAA1D,iBAkBC;QAjBC,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC9C,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAC,MAAM,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,MAAM,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,SAAS,EAAC,QAAQ,EAAC,KAAK,EAAC,OAAO,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/G,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAS,CAAC,sBAAsB,GAAC,aAAa,GAAC,SAAS,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAC,SAAS,EAAC,CAAC,EAAC,EAAC,OAAO,EAAC,OAAO,EAAC,CAAC;aAChI,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,SAAS,CAAC,UAAA,IAAI;YACR,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,WAAW;gBACzC,IAAI,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC;gBAC7B,IAAI,GAAG,GAAG,IAAI,yBAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxF,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAA;YACF,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC,CACJ,CAAC;QACN,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAnCH;QAAC,iBAAU,EAAE;;0BAAA;IAqCb,yBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,0BAAkB,qBAoC9B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Http,Headers} from '@angular/http';\r\nimport {endpoints} from './endpoints';\r\nimport {Cycanswer} from '../+suggestion/cycanswer.model';\r\nimport {Question} from '../+suggestion/question.model';\r\nimport {Sentence} from '../+concepts/sentence.model';\r\ndeclare var Spinner:any;\r\n\r\n@Injectable()\r\nexport class CycquestionService {\r\n\r\n  private results: Question[] = [];\r\n  private mriFieldConstraints: any;\r\n\r\n\r\n  private extractAnswer(data: any): Cycanswer[] {\r\n    var answers: Cycanswer[] = [];\r\n    data.answers.forEach(a => {\r\n      answers.push(new Cycanswer(a.nl, a.cycl,a.rmicode,a.recommended));\r\n    })\r\n    return answers;\r\n  }\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public loadQuestionsFromCyc(sentences:any,sessionId:string):Question[] {\r\n    var ref = this;\r\n    var elem = document.getElementById('spinner');\r\n    var spinner = new Spinner({radius:60,width:20,length:80,lines:15,className:'loader',color:'wheat'}).spin(elem);\r\n    var headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    this._http.post(endpoints.GET_CYC_QUESTIONS_DEMO+\"?sessionId=\"+sessionId,JSON.stringify({'sentences':sentences}),{headers:headers})\r\n      .map(res => res.json())\r\n      .subscribe(data => {\r\n             data.mriFieldConstraints.forEach(constraints => {\r\n                var q = constraints.question;\r\n                var res = new Question(q.nl, q.cycl, this.extractAnswer(constraints),constraints.index);\r\n                ref.results.push(res);\r\n              })\r\n              spinner.stop();\r\n            }\r\n        );\r\n    return this.results;\r\n  }\r\n\r\n}\r\n"]}