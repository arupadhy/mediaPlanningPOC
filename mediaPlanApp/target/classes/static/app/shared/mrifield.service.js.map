{"version":3,"file":"mrifield.service.js","sourceRoot":"","sources":["../../src/app/shared/mrifield.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA2B,eAAe,CAAC,CAAA;AAC3C,0BAAwB,aAAa,CAAC,CAAA;AACtC,gCAAwB,gCAAgC,CAAC,CAAA;AACzD,+BAAuB,+BAA+B,CAAC,CAAA;AAKvD;IAcE,yBAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAZxB,YAAO,GAAe,EAAE,CAAC;QAEzB,WAAM,GAAU,uzGAAuzG,CAAC;IAU5yG,CAAC;IAR5B,uCAAa,GAArB,UAAsB,IAAS;QAC7B,IAAI,OAAO,GAAgB,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,IAAI,2BAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAIM,4CAAkB,GAAzB;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,sCAAY,GAAnB,UAAoB,iBAA4B;QAAhD,iBAkBC;QAjBC,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC9C,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAC,MAAM,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,MAAM,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,SAAS,EAAC,QAAQ,EAAC,KAAK,EAAC,OAAO,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/G,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAS,CAAC,cAAc,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,YAAY,EAAC,iBAAiB,EAAC,CAAC,EAAC,EAAC,OAAO,EAAC,OAAO,EAAC,CAAC;aACzG,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,SAAS,CAAC,UAAA,IAAI;YACR,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,WAAW;gBACzC,IAAI,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC;gBAC7B,IAAI,GAAG,GAAG,IAAI,yBAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxF,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAA;YACF,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC,CACJ,CAAC;QACN,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAvCH;QAAC,iBAAU,EAAE;;uBAAA;IAyCb,sBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,uBAAe,kBAwC3B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Http,Headers} from '@angular/http';\r\nimport {endpoints} from './endpoints';\r\nimport {Cycanswer} from '../+suggestion/cycanswer.model';\r\nimport {Question} from '../+suggestion/question.model';\r\nimport {Sentence} from '../+concepts/sentence.model';\r\ndeclare var Spinner:any;\r\n\r\n@Injectable()\r\nexport class MrifieldService {\r\n\r\n private results: Question[] = [];\r\n private mriFieldConstraints: any;\r\n private FIELDS:string = \"Men ;Women;Single ;Married;Sep/Wid/Div;Engaged;Living with partner/Fiance/Boyfriend/Girlfriend;White;Spanish/Hispanic/Latino;Black/African American;Employed;Employed full time;Employed part time;Non employed;Grocery Stores # Times Shopped Last 30 Days – Dave Mart [6-9 or 10-14 or 15 or More];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [L None];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [L 1 - 2];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [M 3 - 4];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [M 5 - 7];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [H 8 - 10];Food Prepared from Scratch # Times in the Last 30 Days (Principal Shopper) [H 11 - 15];I try to eat healthy these days and pay attention to my nutrition [Any Agree];I enjoy being creative in the kitchen [Any Agree];I try to buy foods that are grown or produced locally (in the region where I live) [Any Agree];I enjoy trying different types of food [Any Agree];Dinners in my home are usually planned ahead of time [Any Agree];I regularly eat organic foods [Any Agree];I often use recipes when preparing a meal [Any Agree];I’m always on the lookout for quick and easy meal options [Any Agree];Used Grocery Store Loyalty Card Last 30 Days (Principal Shopper) [Yes];Grocery Shopping Time of Day Shop for Groceries (Principal Shopper) [Morning];Grocery Shopping Time of Day Shop for Groceries (Principal Shopper) [Afternoon];Grocery Shopping Time of Day Shop for Groceries (Principal Shopper) [Evening];Grocery Shopping Time of Day Shop for Groceries (Principal Shopper) [Various Times];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Sunday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Monday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Tuesday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Wednesday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Thursday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Friday];Grocery Shopping Day(s) Shopped in Past Week (Principal Shopper) [Saturday];Grocery Shopping # of Trips in Average Week (Principal Shopper) [None];Grocery Shopping # of Trips in Average Week (Principal Shopper) [1];Grocery Shopping # of Trips in Average Week (Principal Shopper) [2];Buying Styles - Any Agree [Buying American products is important to me];Buying Styles - Any Agree [I know the price I pay for most of the foods and packaged goods I buy];Buying Styles - Any Agree [I think shopping is a great way to relax];Buying Styles - Any Agree [I enjoy wandering the store looking for new, interesting products];Buying Styles - Any Agree [I only purchase products online when I have a coupon or promotional code for the site];Buying Styles - Any Agree [I don't make purchase decisions based on advertising];Buying Styles - Any Agree [I like to shop around before making a purchase];Buying Styles - Any Agree [If I really want something I will buy it on credit rather than wait];Buying Styles - Any Agree [I buy based on quality, not price];Buying Styles - Any Agree [I buy natural products because I am concerned about the environment];Buying Styles - Any Agree [The offer of “free shipping” attracts me to a shopping website]\";\r\n\r\n  private extractAnswer(data: any): Cycanswer[] {\r\n    var answers: Cycanswer[] = [];\r\n    data.answers.forEach(a => {\r\n      answers.push(new Cycanswer(a.nl, a.cycl,a.rmicode,a.recommended));\r\n    })\r\n    return answers;\r\n  }\r\n\r\n  constructor(private _http: Http) { }\r\n  \r\n  public getHardCodedFields() {\r\n    return this.FIELDS;\r\n  }\r\n\r\n  public getMriFields(selectedQuestions:Question[]):Question[] {\r\n    var ref = this;\r\n    var elem = document.getElementById('spinner');\r\n    var spinner = new Spinner({radius:60,width:20,length:80,lines:15,className:'loader',color:'wheat'}).spin(elem);\r\n    var headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    this._http.post(endpoints.GET_MRI_FIELDS,JSON.stringify({'queryTerms':selectedQuestions}),{headers:headers})\r\n      .map(res => res.json())\r\n      .subscribe(data => {\r\n             data.mriFieldConstraints.forEach(constraints => {\r\n                var q = constraints.question;\r\n                var res = new Question(q.nl, q.cycl, this.extractAnswer(constraints),constraints.index);\r\n                ref.results.push(res);\r\n              })\r\n              spinner.stop();\r\n            }\r\n        );\r\n    return this.results;\r\n  }\r\n \r\n}\r\n"]}